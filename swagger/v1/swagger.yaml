---
openapi: 3.0.1
info:
  title: API V1
  version: v1
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Enter the JWT token in the format: Bearer {token}'
paths:
  "/api/v1/hotels":
    post:
      summary: Create a hotel
      security:
      - Bearer: []
      tags:
      - Hotels
      parameters: []
      responses:
        '201':
          description: Hotel created
          content:
            application/json:
              examples:
                success_example:
                  value:
                    id: 1
                    name: Hotel California
                    location: Los Angeles
                    amenities: Pool, Gym
        '422':
          description: Invalid attributes
          content:
            application/json:
              examples:
                error_example:
                  value:
                    error:
                    - Name can't be blank
                    - Location can't be blank
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                unauthorized_example:
                  value:
                    error: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Hotel California
                location:
                  type: string
                  example: Los Angeles
                amenities:
                  type: string
                  example: Pool, Gym
              required:
              - name
              - location
              - amenities
  "/api/v1/hotels/{hotel_id}":
    parameters:
    - name: hotel_id
      in: path
      description: ID of the hotel
      required: true
      schema:
        type: integer
    put:
      summary: Update a hotel
      security:
      - Bearer: []
      tags:
      - Hotels
      parameters: []
      responses:
        '200':
          description: Hotel updated
          content:
            application/json:
              examples:
                success_example:
                  value:
                    id: 1
                    name: Updated Hotel
                    location: Los Angeles
                    amenities: Pool, Gym
        '422':
          description: Invalid hotel attributes
          content:
            application/json:
              examples:
                error_example:
                  value:
                    error:
                    - Name has already been taken
        '404':
          description: Hotel not found
          content:
            application/json:
              examples:
                not_found_example:
                  value:
                    error: Hotel not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Updated Hotel
                location:
                  type: string
                  example: New York
                amenities:
                  type: string
                  example: Pool, Gym, Spa
    delete:
      summary: Delete a hotel
      security:
      - Bearer: []
      tags:
      - Hotels
      responses:
        '204':
          description: Hotel deleted
        '404':
          description: Hotel not found
          content:
            application/json:
              examples:
                not_found_example:
                  value:
                    error: Hotel not found
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                unauthorized_example:
                  value:
                    error: Unauthorized
  "/api/v1/reservations":
    get:
      summary: Retrieve a list of reservations (past, current, and future)
      security:
      - Bearer: []
      tags:
      - Reservations
      responses:
        '200':
          description: Reservations retrieved successfully
          content:
            application/json:
              examples:
                success_example:
                  value:
                    past:
                    - id: 1
                      room_id: 5
                      user_id: 3
                      check_in: '2024-09-13'
                      check_out: '2024-09-14'
                    current:
                    - id: 2
                      room_id: 5
                      user_id: 3
                      check_in: '2024-09-17'
                      check_out: '2024-09-18'
                    future:
                    - id: 3
                      room_id: 5
                      user_id: 3
                      check_in: '2024-09-20'
                      check_out: '2024-09-21'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
  "/api/v1/reservations/all":
    get:
      summary: Fetch all reservations (Admin only)
      tags:
      - Reservations
      security:
      - Bearer: []
      responses:
        '200':
          description: list of reservations
          content:
            application/json:
              examples:
                example_response:
                  value:
                  - id: 1
                    check_in: '2024-10-01'
                    check_out: '2024-10-05'
                    room_id: 10
                    user_id: 2
                    created_at: '2024-09-20T10:00:00.000Z'
                    updated_at: '2024-09-20T10:00:00.000Z'
                  - id: 2
                    check_in: '2024-09-25'
                    check_out: '2024-09-30'
                    room_id: 12
                    user_id: 3
                    created_at: '2024-09-20T09:30:00.000Z'
                    updated_at: '2024-09-20T09:30:00.000Z'
        '401':
          description: unauthorized
  "/api/v1/hotels/{hotel_id}/rooms/{room_id}/reservations":
    post:
      summary: Create a reservation for a room
      security:
      - Bearer: []
      tags:
      - Reservations
      parameters:
      - name: hotel_id
        in: path
        schema:
          type: integer
          example: 1
        required: true
      - name: room_id
        in: path
        schema:
          type: integer
          example: 1
        required: true
      responses:
        '201':
          description: Reservation created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  room_id:
                    type: integer
                  user_id:
                    type: integer
                  check_in:
                    type: string
                    format: date
                  check_out:
                    type: string
                    format: date
                required:
                - id
                - room_id
                - user_id
                - check_in
                - check_out
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Room not found
        '422':
          description: Check-in and check-out dates are required
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Check-in and check-out dates are required
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                check_in:
                  type: string
                  format: date
                  example: '2024-09-17'
                check_out:
                  type: string
                  format: date
                  example: '2024-09-18'
              required:
              - check_in
              - check_out
  "/api/v1/hotels/{hotel_id}/rooms":
    post:
      summary: Create a room for a hotel (Admin only)
      security:
      - Bearer: []
      tags:
      - Rooms
      parameters:
      - name: hotel_id
        in: path
        schema:
          type: integer
          example: 1
        required: true
      responses:
        '201':
          description: Room created
          content:
            application/json:
              examples:
                success_example:
                  value:
                    number: '101'
                    capacity: 2
                    amenities: WiFi, TV, Pool
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                error_example:
                  value:
                    error: Unauthorized access
        '422':
          description: Invalid attributes
          content:
            application/json:
              examples:
                error_example:
                  value:
                    error:
                    - Number can't be blank
                    - Amenities can't be blank
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                number:
                  type: string
                  example: '101'
                capacity:
                  type: integer
                  example: 2
                amenities:
                  type: string
                  example: WiFi, TV, Pool
              required:
              - number
              - capacity
              - amenities
  "/api/v1/hotels/{hotel_id}/rooms/{room_id}":
    put:
      summary: Update a room (Admin only)
      security:
      - Bearer: []
      tags:
      - Rooms
      parameters:
      - name: hotel_id
        in: path
        schema:
          type: integer
          example: 1
        required: true
      - name: room_id
        in: path
        schema:
          type: integer
          example: 1
        required: true
      responses:
        '200':
          description: Room updated
          content:
            application/json:
              examples:
                success_example:
                  value:
                    number: '202'
                    capacity: 3
                    amenities: AC, Pool
        '404':
          description: Room not found
          content:
            application/json:
              examples:
                error_example:
                  value:
                    error: Room not found
        '422':
          description: Invalid attributes
          content:
            application/json:
              examples:
                error_example:
                  value:
                    error:
                    - Number can't be blank
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                number:
                  type: string
                  example: '202'
                capacity:
                  type: integer
                  example: 3
                amenities:
                  type: string
                  example: AC, Pool
              required:
              - number
              - capacity
              - amenities
    delete:
      summary: Delete a room (Admin only)
      security:
      - Bearer: []
      tags:
      - Rooms
      parameters:
      - name: hotel_id
        in: path
        schema:
          type: integer
          example: 1
        required: true
      - name: room_id
        in: path
        schema:
          type: integer
          example: 1
        required: true
      responses:
        '204':
          description: Room deleted
        '404':
          description: Room not found
          content:
            application/json:
              examples:
                error_example:
                  value:
                    error: Room not found
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                error_example:
                  value:
                    error: Unauthorized access
  "/api/v1/hotels/{hotel_id}/rooms/available":
    get:
      summary: List available rooms for a hotel
      security:
      - Bearer: []
      tags:
      - Rooms
      parameters:
      - name: hotel_id
        in: path
        schema:
          type: integer
          example: 1
        required: true
      - name: check_in
        in: query
        schema:
          type: string
          format: date
          example: 11/11/2024
        required: true
      - name: check_out
        in: query
        schema:
          type: string
          format: date
          example: 12/11/2024
        required: true
      responses:
        '200':
          description: No available rooms found
          content:
            application/json:
              examples:
                success_example:
                  value:
                  - number: '101'
                    hotel_id: 1
                    capacity: 2
                    amenities: WiFi, TV, Pool
        '401':
          description: Unauthorized
          content:
            application/json:
              examples:
                error_example:
                  value:
                    error: Unauthorized access
        '422':
          description: check-in and check-out dates are required
          content:
            application/json:
              examples:
                error_example:
                  value:
                    error: Check-in and check-out dates are required
  "/api/v1/login":
    post:
      summary: Login a user
      tags:
      - Authentication
      parameters: []
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: test
                password:
                  type: string
                  example: password
              required:
              - username
              - password
  "/api/v1/signup":
    post:
      summary: Creates a new user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: User created
        '422':
          description: Invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    username:
                      type: string
                      example: test
                    password:
                      type: string
                      example: password
                    password_confirmation:
                      type: string
                      example: password
                    role:
                      type: integer
                      example: 0
                  required:
                  - username
                  - password
                  - password_confirmation
servers:
- url: http://127.0.0.1:3000/
  variables:
    defaultHost:
      default: http://127.0.0.1:3000/
